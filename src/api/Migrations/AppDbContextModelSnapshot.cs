// <auto-generated />
using System;
using DefinitiveEdition.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DefinitiveEdition.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DefinitiveEdition.Api.Data.Models.ConsoleDeveloper", b =>
                {
                    b.Property<int>("ConsoleDeveloperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsoleDeveloperId");

                    b.ToTable("ConsoleDeveloper");

                    b.HasData(
                        new
                        {
                            ConsoleDeveloperId = 1,
                            Name = "Nintendo"
                        });
                });

            modelBuilder.Entity("DefinitiveEdition.Api.Data.Models.FeatureType", b =>
                {
                    b.Property<int>("FeatureTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeatureTypeId");

                    b.ToTable("FeatureType");

                    b.HasData(
                        new
                        {
                            FeatureTypeId = 1,
                            Name = "Pro"
                        },
                        new
                        {
                            FeatureTypeId = 2,
                            Name = "Neutral"
                        },
                        new
                        {
                            FeatureTypeId = 3,
                            Name = "Con"
                        });
                });

            modelBuilder.Entity("DefinitiveEdition.Api.Data.Models.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InitialReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("50eb6f62-a159-42ee-ab59-589f38daf243"),
                            InitialReleaseDate = new DateTime(2000, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "The Legend of Zelda - Majora's Mask",
                            SeriesId = new Guid("dd11a88d-3348-49e3-8fc2-fe018d940be3")
                        });
                });

            modelBuilder.Entity("DefinitiveEdition.Api.Data.Models.GameConsole", b =>
                {
                    b.Property<Guid>("GameConsoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConsoleDeveloperId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InitialReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameConsoleId");

                    b.HasIndex("ConsoleDeveloperId");

                    b.ToTable("GameConsole");

                    b.HasData(
                        new
                        {
                            GameConsoleId = new Guid("24040a96-0264-4911-b9e1-1a47375d913a"),
                            ConsoleDeveloperId = 1,
                            InitialReleaseDate = new DateTime(1996, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "64"
                        },
                        new
                        {
                            GameConsoleId = new Guid("3e4ed385-0e49-4758-ab38-86dae54eae63"),
                            ConsoleDeveloperId = 1,
                            InitialReleaseDate = new DateTime(2011, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "3DS"
                        });
                });

            modelBuilder.Entity("DefinitiveEdition.Api.Data.Models.GamePort", b =>
                {
                    b.Property<Guid>("GamePortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameConsoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsInitialRelease")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSameName")
                        .HasColumnType("bit");

                    b.Property<string>("PortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GamePortId");

                    b.HasIndex("GameConsoleId");

                    b.HasIndex("GameId");

                    b.ToTable("GamePort");

                    b.HasData(
                        new
                        {
                            GamePortId = new Guid("4a8a9505-c744-4dcb-a822-e43fe04c273b"),
                            GameConsoleId = new Guid("24040a96-0264-4911-b9e1-1a47375d913a"),
                            GameId = new Guid("50eb6f62-a159-42ee-ab59-589f38daf243"),
                            IsInitialRelease = true,
                            IsSameName = true
                        },
                        new
                        {
                            GamePortId = new Guid("f6d9e9f1-b512-42a0-8213-247b1080689e"),
                            GameConsoleId = new Guid("3e4ed385-0e49-4758-ab38-86dae54eae63"),
                            GameId = new Guid("50eb6f62-a159-42ee-ab59-589f38daf243"),
                            IsInitialRelease = false,
                            IsSameName = false,
                            PortName = "The Legend of Zelda - Majora's Mask 3D",
                            ReleaseDate = new DateTime(2015, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DefinitiveEdition.Api.Data.Models.PortFeature", b =>
                {
                    b.Property<Guid>("PortFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeatureTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamePortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PortFeatureId");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("GameId");

                    b.HasIndex("GamePortId");

                    b.ToTable("PortFeature");

                    b.HasData(
                        new
                        {
                            PortFeatureId = new Guid("422b4e25-42d3-466a-9f7e-c9fda861e4cc"),
                            Description = "Swimming speed while wearing the Zora mask is automatically fast without needing to use magic",
                            Feature = "Fast Zora Swimming",
                            FeatureTypeId = 1,
                            GameId = new Guid("50eb6f62-a159-42ee-ab59-589f38daf243"),
                            GamePortId = new Guid("4a8a9505-c744-4dcb-a822-e43fe04c273b")
                        },
                        new
                        {
                            PortFeatureId = new Guid("46b805cf-01ad-4ad8-85b1-4958fcd93f33"),
                            Description = "The original release of Majora's Mask capped out at a framerate of 20 FPS. Little hard on the eyes at first",
                            Feature = "20 FPS",
                            FeatureTypeId = 3,
                            GameId = new Guid("50eb6f62-a159-42ee-ab59-589f38daf243"),
                            GamePortId = new Guid("4a8a9505-c744-4dcb-a822-e43fe04c273b")
                        },
                        new
                        {
                            PortFeatureId = new Guid("cb4e8da2-c16b-4d3e-992f-1d75e2805205"),
                            Description = "The 3DS port runs a bit smoother at 30 FPS, which is easier on the eyes",
                            Feature = "30 FPS",
                            FeatureTypeId = 1,
                            GameId = new Guid("50eb6f62-a159-42ee-ab59-589f38daf243"),
                            GamePortId = new Guid("f6d9e9f1-b512-42a0-8213-247b1080689e")
                        },
                        new
                        {
                            PortFeatureId = new Guid("051cbbd5-3dc9-44b8-88a1-30c372d1f975"),
                            Description = "Some purists may complain that this takes away from the original, the Song of Double Time can take you to a specific time of the current day you are on.",
                            Feature = "Improved Song of Double Time",
                            FeatureTypeId = 2,
                            GameId = new Guid("50eb6f62-a159-42ee-ab59-589f38daf243"),
                            GamePortId = new Guid("f6d9e9f1-b512-42a0-8213-247b1080689e")
                        },
                        new
                        {
                            PortFeatureId = new Guid("4a3d4cfb-c5b2-4e27-bfdf-4b9024413907"),
                            Description = "Without using Magic, the Zora swimming speed will seem like you are crawling through the ocean. Fan patches have been made to patch this though",
                            Feature = "Slow Zora Swimming",
                            FeatureTypeId = 3,
                            GameId = new Guid("50eb6f62-a159-42ee-ab59-589f38daf243"),
                            GamePortId = new Guid("f6d9e9f1-b512-42a0-8213-247b1080689e")
                        });
                });

            modelBuilder.Entity("DefinitiveEdition.Api.Data.Models.Series", b =>
                {
                    b.Property<Guid>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InitialReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeriesId");

                    b.ToTable("Series");

                    b.HasData(
                        new
                        {
                            SeriesId = new Guid("dd11a88d-3348-49e3-8fc2-fe018d940be3"),
                            Description = "Save the Princess and Hyrule from Ganon sometimes. Fix me up later....",
                            InitialReleaseDate = new DateTime(1986, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "The Legend of Zelda"
                        });
                });

            modelBuilder.Entity("DefinitiveEdition.Api.Data.Models.Game", b =>
                {
                    b.HasOne("DefinitiveEdition.Api.Data.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DefinitiveEdition.Api.Data.Models.GameConsole", b =>
                {
                    b.HasOne("DefinitiveEdition.Api.Data.Models.ConsoleDeveloper", "ConsoleDeveloper")
                        .WithMany()
                        .HasForeignKey("ConsoleDeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DefinitiveEdition.Api.Data.Models.GamePort", b =>
                {
                    b.HasOne("DefinitiveEdition.Api.Data.Models.GameConsole", "GameConsole")
                        .WithMany()
                        .HasForeignKey("GameConsoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DefinitiveEdition.Api.Data.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DefinitiveEdition.Api.Data.Models.PortFeature", b =>
                {
                    b.HasOne("DefinitiveEdition.Api.Data.Models.FeatureType", "FeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DefinitiveEdition.Api.Data.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DefinitiveEdition.Api.Data.Models.GamePort", "GamePort")
                        .WithMany()
                        .HasForeignKey("GamePortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
